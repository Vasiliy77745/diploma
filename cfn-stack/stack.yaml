AWSTemplateFormatVersion: 2010-09-09
Description: "Myapp"
Parameters: 
  AppImage: 
    Default: "alexv77745/diploma:latest"
    Description: "docker image to deploy" 
    Type: String

Resources:
  #==============VPC==============
  #  Vpc:
  #    Type: AWS::EC2::VPC
  #    Properties: 
  #      CidrBlock: '10.0.0.0/16'
  #      EnableDnsHostnames: true
  #      EnableDnsSupport: true
  #  Subnet:
  #    Type: AWS::EC2::Subnet
  #    Properties:
  #      MapPublicIpOnLaunch: true
  #      VpcId:
  #        Ref: Vpc
  #      CidrBlock: 10.0.0.0/24
  #      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region" } ]
  #==============BUCKET==============
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-',[!Sub '${AWS::StackName}', 'diploma-app-bucket']]
  #==============ROLE==============
  Role: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  #==============POLICY==============
  Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join ['-',[!Sub '${AWS::StackName}', 'diploma-app-policy']]
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: 
          - "s3:PutObject"
          - "s3:GetObject"
          - "s3:ListBucket"
          - "s3:DeleteObject"
          Resource:
          - !Join ['', [!GetAtt [Bucket, Arn], '/*']]
          - !GetAtt [Bucket, Arn]
      Roles: [!Ref 'Role']
  #==============INSTANCE PROFILE==============
  InstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: 
        - Ref: "Role" 
  #==============SECURITY GROUP==============
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh to client host
      #VpcId: !Ref 'Vpc'
      VpcId: 'vpc-4f2f4b32'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0

  #==============ELASTIC LOAD BALANCING============
  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones:
        - "us-east-1a"
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP

  #===============AUTO SCALING LAUNCH GROUP===========
  myServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: 
        - "us-east-1a"
    #VPCZoneIdentifier:
     # - !Ref myPublicSubnet1
      #- !Ref myPublicSubnet2
      LaunchConfigurationName: !Ref AppInstance
      MinSize: '1'
      MaxSize: '1'
      HealthCheckGracePeriod: 300
      MaxInstanceLifetime: 2592000
      LoadBalancerNames:
      - !Ref "MyLoadBalancer"

  
  #================EC2 INSTANCE==============
  AppInstance:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: "ami-087c17d1fe0178315"
      IamInstanceProfile: 
        Ref: 'InstanceProfile'
      KeyName: "aws1"
      InstanceType: t2.micro
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      #SubnetId:
      #  Ref: 'Subnet'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource AppInstance --configsets setup --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AppInstance --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - setup
        setup:
          #files:
           # /etc/cfn/hooks.d/cfn-auto-reloader.conf:
            #  content: !Sub |
             #   [cfn-auto-reloader-hook]
              #  triggers=post.update
               # path=Resources.AppInstance.Metadata.AWS::CloudFormation::Init
                #action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource AppInstance --configsets setup --region ${AWS::Region}
                #runas=root
              #mode: "000400"
              #owner: "root"
              #group: "root"
          commands:
            a-dockerInstall:
              command: 'sudo amazon-linux-extras install docker'
            b-dockerEnable:
              command: 'sudo systemctl start docker'
            c-dockerEnable:
              command: 'sudo systemctl enable docker'
            d-addUserDockerGroup:
              command: 'sudo usermod -a -G docker ec2-user'
            e-stopOld:
              command: 'docker stop $(docker ps -q) || exit 0'
            f-deleteOld:
              command: 'docker rm $(docker ps -a -q) || exit 0'
            g-RunApp:
              command: !Join ['', ['docker run -d --restart always -e AWS_S3_BUCKET=', !Ref 'Bucket', ' -p 80:5000 ', !Ref 'AppImage']]
Outputs:
  AppDnsName:
    Description: DNS name of the app
    Value: !GetAtt [MyLoadBalancer, DNSName]